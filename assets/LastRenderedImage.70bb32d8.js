import{L as y,M as p,N as T,O as m,P as b,Q as P,R as g,S as w,U as J,V as j,W as I,X as k,_,r as W,Y as q,g as v,w as H,a as L,c as B,e as C,n as A,u as N,z as E,k as M}from"./index.ef21516a.js";class R{constructor(e){this.apiClient=e||y.instance}deleteJobWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling deleteJob");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=null;return this.apiClient.callApi("/api/v3/jobs/{job_id}","DELETE",n,r,s,i,t,o,u,a,l,null)}deleteJob(e){return this.deleteJobWithHttpInfo(e).then(function(t){return t.data})}deleteJobWhatWouldItDoWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling deleteJobWhatWouldItDo");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=T;return this.apiClient.callApi("/api/v3/jobs/{job_id}/what-would-delete-do","GET",n,r,s,i,t,o,u,a,l,null)}deleteJobWhatWouldItDo(e){return this.deleteJobWhatWouldItDoWithHttpInfo(e).then(function(t){return t.data})}fetchGlobalLastRenderedInfoWithHttpInfo(){let e=null,t={},n={},r={},s={},i=[],o=[],u=["application/json"],a=m;return this.apiClient.callApi("/api/v3/jobs/last-rendered","GET",t,n,r,s,e,i,o,u,a,null)}fetchGlobalLastRenderedInfo(){return this.fetchGlobalLastRenderedInfoWithHttpInfo().then(function(e){return e.data})}fetchJobWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling fetchJob");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=b;return this.apiClient.callApi("/api/v3/jobs/{job_id}","GET",n,r,s,i,t,o,u,a,l,null)}fetchJob(e){return this.fetchJobWithHttpInfo(e).then(function(t){return t.data})}fetchJobBlocklistWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling fetchJobBlocklist");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=[P];return this.apiClient.callApi("/api/v3/jobs/{job_id}/blocklist","GET",n,r,s,i,t,o,u,a,l,null)}fetchJobBlocklist(e){return this.fetchJobBlocklistWithHttpInfo(e).then(function(t){return t.data})}fetchJobLastRenderedInfoWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling fetchJobLastRenderedInfo");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=m;return this.apiClient.callApi("/api/v3/jobs/{job_id}/last-rendered","GET",n,r,s,i,t,o,u,a,l,null)}fetchJobLastRenderedInfo(e){return this.fetchJobLastRenderedInfoWithHttpInfo(e).then(function(t){return t.data})}fetchJobTasksWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'jobId' when calling fetchJobTasks");let n={job_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=g;return this.apiClient.callApi("/api/v3/jobs/{job_id}/tasks","GET",n,r,s,i,t,o,u,a,l,null)}fetchJobTasks(e){return this.fetchJobTasksWithHttpInfo(e).then(function(t){return t.data})}fetchTaskWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'taskId' when calling fetchTask");let n={task_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=w;return this.apiClient.callApi("/api/v3/tasks/{task_id}","GET",n,r,s,i,t,o,u,a,l,null)}fetchTask(e){return this.fetchTaskWithHttpInfo(e).then(function(t){return t.data})}fetchTaskLogInfoWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'taskId' when calling fetchTaskLogInfo");let n={task_id:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=J;return this.apiClient.callApi("/api/v3/tasks/{task_id}/log","GET",n,r,s,i,t,o,u,a,l,null)}fetchTaskLogInfo(e){return this.fetchTaskLogInfoWithHttpInfo(e).then(function(t){return t.data})}fetchTaskLogTailWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'taskId' when calling fetchTaskLogTail");let n={task_id:e},r={},s={},i={},o=[],u=[],a=["text/plain","application/json"],l="String";return this.apiClient.callApi("/api/v3/tasks/{task_id}/logtail","GET",n,r,s,i,t,o,u,a,l,null)}fetchTaskLogTail(e){return this.fetchTaskLogTailWithHttpInfo(e).then(function(t){return t.data})}getJobTypeWithHttpInfo(e){let t=null;if(e==null)throw new p("Missing the required parameter 'typeName' when calling getJobType");let n={typeName:e},r={},s={},i={},o=[],u=[],a=["application/json"],l=j;return this.apiClient.callApi("/api/v3/jobs/type/{typeName}","GET",n,r,s,i,t,o,u,a,l,null)}getJobType(e){return this.getJobTypeWithHttpInfo(e).then(function(t){return t.data})}getJobTypesWithHttpInfo(){let e=null,t={},n={},r={},s={},i=[],o=[],u=["application/json"],a=I;return this.apiClient.callApi("/api/v3/jobs/types","GET",t,n,r,s,e,i,o,u,a,null)}getJobTypes(){return this.getJobTypesWithHttpInfo().then(function(e){return e.data})}queryJobsWithHttpInfo(e){let t=e;if(e==null)throw new p("Missing the required parameter 'jobsQuery' when calling queryJobs");let n={},r={},s={},i={},o=[],u=["application/json"],a=["application/json"],l=k;return this.apiClient.callApi("/api/v3/jobs/query","POST",n,r,s,i,t,o,u,a,l,null)}queryJobs(e){return this.queryJobsWithHttpInfo(e).then(function(t){return t.data})}removeJobBlocklistWithHttpInfo(e,t){t=t||{};let n=t.jobBlocklistEntry;if(e==null)throw new p("Missing the required parameter 'jobId' when calling removeJobBlocklist");let r={job_id:e},s={},i={},o={},u=[],a=["application/json"],l=["application/json"],h=null;return this.apiClient.callApi("/api/v3/jobs/{job_id}/blocklist","DELETE",r,s,i,o,n,u,a,l,h,null)}removeJobBlocklist(e,t){return this.removeJobBlocklistWithHttpInfo(e,t).then(function(n){return n.data})}setJobPriorityWithHttpInfo(e,t){let n=t;if(e==null)throw new p("Missing the required parameter 'jobId' when calling setJobPriority");if(t==null)throw new p("Missing the required parameter 'jobPriorityChange' when calling setJobPriority");let r={job_id:e},s={},i={},o={},u=[],a=["application/json"],l=["application/json"],h=null;return this.apiClient.callApi("/api/v3/jobs/{job_id}/setpriority","POST",r,s,i,o,n,u,a,l,h,null)}setJobPriority(e,t){return this.setJobPriorityWithHttpInfo(e,t).then(function(n){return n.data})}setJobStatusWithHttpInfo(e,t){let n=t;if(e==null)throw new p("Missing the required parameter 'jobId' when calling setJobStatus");if(t==null)throw new p("Missing the required parameter 'jobStatusChange' when calling setJobStatus");let r={job_id:e},s={},i={},o={},u=[],a=["application/json"],l=["application/json"],h=null;return this.apiClient.callApi("/api/v3/jobs/{job_id}/setstatus","POST",r,s,i,o,n,u,a,l,h,null)}setJobStatus(e,t){return this.setJobStatusWithHttpInfo(e,t).then(function(n){return n.data})}setTaskStatusWithHttpInfo(e,t){let n=t;if(e==null)throw new p("Missing the required parameter 'taskId' when calling setTaskStatus");if(t==null)throw new p("Missing the required parameter 'taskStatusChange' when calling setTaskStatus");let r={task_id:e},s={},i={},o={},u=[],a=["application/json"],l=["application/json"],h=null;return this.apiClient.callApi("/api/v3/tasks/{task_id}/setstatus","POST",r,s,i,o,n,u,a,l,h,null)}setTaskStatus(e,t){return this.setTaskStatusWithHttpInfo(e,t).then(function(n){return n.data})}submitJobWithHttpInfo(e){let t=e;if(e==null)throw new p("Missing the required parameter 'submittedJob' when calling submitJob");let n={},r={},s={},i={},o=[],u=["application/json"],a=["application/json"],l=b;return this.apiClient.callApi("/api/v3/jobs","POST",n,r,s,i,t,o,u,a,l,null)}submitJob(e){return this.submitJobWithHttpInfo(e).then(function(t){return t.data})}submitJobCheckWithHttpInfo(e){let t=e;if(e==null)throw new p("Missing the required parameter 'submittedJob' when calling submitJobCheck");let n={},r={},s={},i={},o=[],u=["application/json"],a=["application/json"],l=null;return this.apiClient.callApi("/api/v3/jobs/check","POST",n,r,s,i,t,o,u,a,l,null)}submitJobCheck(e){return this.submitJobCheckWithHttpInfo(e).then(function(t){return t.data})}}const S=["src"],G={props:["jobID","thumbnailSuffix"],setup(d,{expose:e}){const t=d,n=W(""),r=q({"last-rendered":!0,"nothing-rendered-yet":!0}),s=new R(v());function i(a){let l;a?l=s.fetchJobLastRenderedInfo(a):l=s.fetchGlobalLastRenderedInfo(),l.then(o).catch(h=>{console.warn("error fetching last-rendered image info:",h)})}function o(a){if(a==null){n.value="/app/nothing-rendered-yet.svg",r["nothing-rendered-yet"]=!0;return}let l=!1;const h=t.thumbnailSuffix;for(let f of a.suffixes){if(!f.includes(h))continue;let c=new URL(M());c.pathname=a.base+"/"+f,c.search=new Date().getTime(),n.value=c.toString(),l=!0;break}l||console.warn(`LastRenderedImage.vue: could not find thumbnail with suffix "${h}"; available are:`,a.suffixes),r["nothing-rendered-yet"]=!l}function u(a){if(t.jobID&&a.job_id!=t.jobID){console.log("LastRenderedImage.vue: refreshLastRenderedImage() received update for job",a.job_id,"but this component is showing job",t.jobID);return}o(a.thumbnail)}return H(()=>t.jobID,a=>{i(a)}),i(t.jobID),e({refreshLastRenderedImage:u}),(a,l)=>n.value!=""?(L(),B("div",{key:0,class:A(N(r))},[C("img",{src:n.value,alt:"Last-rendered image for this job"},null,8,S)],2)):E("",!0)}};var x=_(G,[["__scopeId","data-v-7dc45162"]]);export{R as J,x as L};
